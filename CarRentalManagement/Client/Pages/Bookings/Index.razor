@inject IJSRuntime js
@page "/bookings/"
@using System.Net

@attribute [Authorize]
@inject HttpClient _client
<h3 class="card-title">Booking</h3>
<hr />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">loading ...</div>
}
else
{
    <table class="table table-responsive ">
        <thead>
            <tr>
                <th>Customer Tax Id</th>
                <th>Date</th>
                <th>Duration in Days</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>@booking.Customer.TaxId</td>
                    <td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                    <td>
                        @(booking.DateIn != null ? (booking.DateIn.Value - booking.DateOut).TotalDays.ToString()
                            : "To Be Determined")
                    </td>
                    <td>
                        <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Booking> Bookings;
    protected override async Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>(Endpoints.BookingsEndpoint);
    }


    private async Task Delete(int id)
    {
        var make = Bookings.First(p => p.Id == id);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{id}");
            Bookings.Remove(make);
            //await OnInitializedAsync();
        }
    }

}

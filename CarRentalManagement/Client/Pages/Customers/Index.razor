@inject IJSRuntime js
@page "/customers/"
@using CarRentalManagement.Client.Services


@attribute [Authorize]
@inject HttpClient _client
@inject HttpInterceptorService _interceptor;

<HeadingComponent Text="Customers"/>


<a href="/customers/create" class="btn btn-dark">
    <span class="oi oi-plus"></span>
    Create Customer
</a>

@if (Customers == null)
{
    <div class="alert alert-info">loading ...</div>
}
else
{
    <table class="table ">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.FirstName @customer.LastName</td>
                    <td>@customer.ContactNumber</td>
                    <td>@customer.EmailAddress</td>
                    <td>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Customer> Customers;
    
    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Customers = await _client.GetFromJsonAsync<List<Customer>>(Endpoints.CustomersEndpoint);
    }


    private async Task Delete(int id)
    {
        var make = Customers.First(p => p.Id == id);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.EmailAddress}?");
        if (confirm)
        {
            _interceptor.MonitorEvent();
            await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{id}");
            Customers.Remove(make);
            //await OnInitializedAsync();
        }
    }



}

@inject IJSRuntime js
@page "/colours/"
@using System.Net

@attribute [Authorize]
@inject HttpClient _client
<h3 class="card-title">Car Colours</h3>
<hr />
<br />

@if (Colours == null)
{
    <div class="alert alert-info">loading ...</div>
}
else
{
    <table class="table table-responsive ">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var colour in Colours)
            {
                <tr>
                    <td>@colour.Name</td>
                    <td>
                        <a href="/colours/view/@colour.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/colours/edit/@colour.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(colour.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Colour> Colours;
    protected override async Task OnInitializedAsync()
    {
        Colours = await _client.GetFromJsonAsync<List<Colour>>(Endpoints.ColoursEndpoint);
    }


    private async Task Delete(int id)
    {
        var make = Colours.First(p => p.Id == id);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{id}");
            Colours.Remove(make);
            //await OnInitializedAsync();
        }
    }

}

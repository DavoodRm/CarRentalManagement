@inject HttpClient _client

<EditForm Model="@vehicle" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Make: </label>
            <div>
                <InputSelect @bind-Value="vehicle.MakeId" class="form-control">
                    <option>-- Select Make --</option>
                    @if (Makes != null)
                    {
                        @foreach (var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="(()=>vehicle.MakeId)"/>
            </div>
        </div>
    
        <div class="form-group">
            <label>Model: </label>
            <div>
                <InputSelect @bind-Value="vehicle.ModelId" class="form-control">
                    <option>-- Select Model --</option>
                    @if (Models != null)
                    {
                        @foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="(()=>vehicle.ModelId)"/>
            </div>
        </div>

        <div class="form-group">
            <label>Color: </label>
            <div>
                <InputSelect @bind-Value="vehicle.ColourId" class="form-control">
                    <option >-- Select Color --</option>
                    @if (Colours != null)
                    {
                        foreach (var color in Colours)
                        {
                            <option value="@color.Id">@color.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="(()=>vehicle.ColourId)"/>
            </div>
        </div>
    
        <div class="form-group">
            <label>Year: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.Year" />
                <ValidationMessage For="(()=>vehicle.Year)"/>
            </div>
        </div>
    
        <div class="form-group">
            <label>License Plate Number: </label>
            <div>
                <InputText @bind-Value="@vehicle.LicensePlateNumber" />
                <ValidationMessage For="(()=>vehicle.LicensePlateNumber)"/>
            </div>
        </div>
    
        <div class="form-group">
            <label>Vin: </label>
            <div>
                <InputText @bind-Value="@vehicle.Vin" />
                <ValidationMessage For="(()=>vehicle.Vin)"/>
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate: </label>
            <div>
                <InputNumber @bind-Value="@vehicle.RentalRate" />
                <ValidationMessage For="(()=>vehicle.RentalRate)"/>
            </div>
        </div> 
    </fieldset>
   

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">Create Vehicle</button>
    }

</EditForm>
<BackToList Target="vehicles"></BackToList>

@code {
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public Vehicle vehicle { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private IList<Make> Makes;
    private IList<Colour> Colours;
    private IList<Model> Models;

    protected override async Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>(Endpoints.MakesEndpoint);
        Colours = await _client.GetFromJsonAsync<List<Colour>>(Endpoints.ColoursEndpoint);
        Models = await _client.GetFromJsonAsync<List<Model>>(Endpoints.ModelsEndpoint);
    }

}
